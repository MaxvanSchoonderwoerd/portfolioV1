---
import { ProjectSchema } from "../content/config";
import BaseLayout from "./BaseLayout.astro";
import dayjs from "dayjs";
import "dayjs/locale/nl"; // import Dutch locale

import localizedFormat from "dayjs/plugin/localizedFormat";
import { Image } from "@astrojs/image/components";

export interface Props extends ProjectSchema {}

const {
  title,
  description,
  stack,
  pubDate,
  updatedDate,
  heroImage,
  badge,
  screenshotsMobile,
  screenshotsDesktop,
} = Astro.props;

dayjs.extend(localizedFormat);
dayjs.locale("nl"); // set global locale to Dutch

const displayDate = dayjs(pubDate).locale("nl").format("D MMMM YYYY");
const displayUpdatedDate = updatedDate ? dayjs(updatedDate).format("ll") : null;
---

<BaseLayout title={title} description={description} image={heroImage}>
  <main class="flex justify-center items-center flex-col">
    {
      heroImage && (
        <Image
          src={heroImage}
          width={1920}
          height={1080}
          alt={title}
          class="w-full mb-6"
        />
      )
    }
    <div class="p-6 pt-10 max-w-[900px]">
      <a href="/projects" class="btn btn-md w-24 mb-4">Terug</a>
      <article class="prose prose-lg max-w-[750px]">
        <h1 class="title my-2 text-4xl font-bold">{title}</h1>
        {pubDate && <time>{displayDate}</time>}
        <br />
        {badge && <div class="badge badge-secondary my-1">{badge}</div>}
        {
          displayUpdatedDate && (
            <div>
              Last updated on <time>{displayUpdatedDate}</time>
            </div>
          )
        }

        <div class="divider my-2"></div>
        <slot />

        <div class="my-6">
          <h2 class="text-xl font-semibold">Tech Stack</h2>
          <p>{stack}</p>
        </div>
      </article>

      <>
        {
          (screenshotsMobile || screenshotsDesktop) && (
            <>
              <div class="divider my-8" />
              <h2 class="text-2xl font-bold mb-8">Screenshots</h2>
            </>
          )
        }
        {
          screenshotsMobile && (
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
              {screenshotsMobile.map((path, i) => (
                <img
                  src={path}
                  alt={`Mobile screenshot ${i + 1} of ${title}`}
                />
              ))}
            </div>
          )
        }

        {
          screenshotsDesktop && (
            <div class="grid grid-cols-1 sm:grid-cols-1 gap-4 mt-8">
              {screenshotsDesktop.map((path, i) => (
                <img
                  src={path}
                  alt={`Desktop screenshot ${i + 1} of ${title}`}
                />
              ))}
            </div>
          )
        }
      </>
    </div>
  </main>
</BaseLayout>
